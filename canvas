export PGDATABASE=canvas_development

# Gerrit alias's
alias gpush="git push origin HEAD:refs/for/master"
alias gpull="git pull -r origin master"

alias c_pre="bundle exec rake canvas:compile_assets"
alias c_i18="bundle exec rake i18:check"
alias c_job="bundle exec script/delayed_job run"
alias c_pull="git pull -r origin master && (bundle check || bundle install || bundle update) && bundle exec rake db:migrate && RAILS_ENV=test bundle exec rake db:migrate"

c_reset_test() {
  dropdb canvas_test
  createdb canvas_test
  psql -c 'GRANT ALL PRIVILEGES ON DATABASE canvas_test TO canvas' -d canvas_test
  psql -c 'GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO canvas' -d canvas_test
  psql -c 'GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO canvas' -d canvas_test
  RAILS_ENV=test bundle exec rake db:test:reset
}

c_reset_dev() {
  bundle exec rake canvas:wipe_cassandra

  dropdb canvas_development
  createdb canvas_development
  psql -c 'GRANT ALL PRIVILEGES ON DATABASE canvas_development TO canvas' -d canvas_development
  psql -c 'GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO canvas' -d canvas_development
  psql -c 'GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO canvas' -d canvas_development

  bundle exec rake db:initial_setup
}

c_pull_all() {
  git pull -r origin master
  for p in `ls vendor/plugins/`; do ((ls vendor/plugins/$p/.git >/dev/null 2>&1) && cd vendor/plugins/$p && git pull -r origin master); done
  for p in `ls gems/`; do ((ls gems/$p/.git >/dev/null 2>&1) && cd gems/$p && git pull -r origin master); done
}

c_reset_all() {
  git reset --hard
  for p in `ls vendor/plugins/`; do ((ls vendor/plugins/$p/.git >/dev/null 2>&1) && cd vendor/plugins/$p && git reset --hard); done
  for p in `ls gems/`; do ((ls gems/$p/.git >/dev/null 2>&1) && cd gems/$p && git reset --hard); done
}

c_spec_branch() {
  zmodload zsh/mapfile

  BRANCHSPECSPATH=~/canvas/spec_branch
  BRANCH=$(git symbolic-ref HEAD --short)
  FILEPATH=${BRANCHSPECSPATH}/${BRANCH}.txt

  if [ -f $FILEPATH ]; then
    echo "Running specs from ${FILEPATH}"
    FILELINES=( "${(f)mapfile[$FILEPATH]}" )
    bundle exec spec $FILELINES
  else
    echo "Branch ${BRANCH} spec list ${FILEPATH} could not be found"
  fi
}
